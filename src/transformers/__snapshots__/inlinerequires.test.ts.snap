// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`doesn't break when required modules are names elsewhere 1`] = `
"
const path = require('path')

const x = {
	path: 42
}

x.path.toString()
>>>>>>>> transforms to >>>>>>>
var x = {
    path: 42
};
x.path.toString();

======= with source map ======
{
  line 1: [1,0 => 3,0], [1,4 => 3,6], [1,5 => 3,7], [1,8 => 3,10],
  line 2: [2,4 => 4,1], [2,8 => 4,5], [2,10 => 4,7], [2,12 => 4,9],
  line 3: [3,1 => 5,1], [3,2 => 5,1],
  line 4: [4,0 => 7,0], [4,1 => 7,1], [4,2 => 7,2], [4,6 => 7,6], [4,7 => 7,7], [4,15 => 7,15], [4,17 => 7,17], [4,18 => 7,17]
}"
`;

exports[`doesn't break with empty source files 1`] = `
"

>>>>>>>> transforms to >>>>>>>

======= with source map ======
{}"
`;

exports[`element access 1`] = `
"
const KEY = require('key');
const other = { KEY: 42 };

const foo = {
	[KEY.two]: true,
	[other]: true,
	[other.KEY]: true,
}

function Test(props) {
	return (
		<div>
			<KEY.two />
			<other.KEY />
		</div>
	)
}
>>>>>>>> transforms to >>>>>>>
var other = { KEY: 42 };
var foo = (_a = {},
    _a[require('key').two] = true,
    _a[other] = true,
    _a[other.KEY] = true,
    _a);
function Test(props) {
    return (React.createElement('div', null,
        React.createElement(require('key').two, null),
        React.createElement(other.KEY, null)));
}
var _a;

======= with source map ======
{
  line 1: [1,0 => 2,0], [1,4 => 2,6], [1,9 => 2,11], [1,12 => 2,14], [1,14 => 2,16], [1,17 => 2,19], [1,19 => 2,21], [1,21 => 2,23], [1,23 => 2,25], [1,24 => 2,26],
  line 2: [2,0 => 4,0], [2,4 => 4,6], [2,7 => 4,9],
  line 3: [3,4 => 5,1], [3,7 => 5,2], [3,21 => 5,5], [3,22 => 5,6], [3,25 => 5,9], [3,29 => 5,12], [3,33 => 5,16],
  line 4: [4,4 => 6,1], [4,7 => 6,2], [4,12 => 6,7], [4,16 => 6,10], [4,20 => 6,14],
  line 5: [5,4 => 7,1], [5,7 => 7,2], [5,12 => 7,7], [5,13 => 7,8], [5,16 => 7,11], [5,20 => 7,14], [5,24 => 7,18],
  line 6: [6,7 => 8,1], [6,8 => 8,1],
  line 7: [7,0 => 10,0], [7,14 => 10,14], [7,19 => 10,19],
  line 8: [8,4 => 11,1], [8,10 => 11,7], [8,11 => 11,8], [8,12 => 12,2],
  line 9: [9,8 => 13,3], [9,28 => 13,4], [9,42 => 13,7], [9,43 => 13,8], [9,46 => 13,11], [9,53 => 13,14],
  line 10: [10,8 => 14,3], [10,28 => 14,4], [10,33 => 14,9], [10,34 => 14,10], [10,37 => 14,13], [10,44 => 14,16], [10,45 => 15,8], [10,46 => 16,2], [10,47 => 16,2],
  line 11: [11,0 => 17,0], [11,1 => 17,1]
}"
`;

exports[`functions 1`] = `
"
const FOO = require('foo');

function FOO() {}
function foo(FOO) {}
function foo(FOO: any) {}
>>>>>>>> transforms to >>>>>>>
function FOO() { }
function foo(FOO) { }
function foo(FOO) { }

======= with source map ======
{
  line 1: [1,0 => 3,0], [1,17 => 3,16], [1,18 => 3,17],
  line 2: [2,0 => 4,0], [2,13 => 4,13], [2,16 => 4,16], [2,20 => 4,19], [2,21 => 4,20],
  line 3: [3,0 => 5,0], [3,13 => 5,13], [3,16 => 5,21], [3,20 => 5,24], [3,21 => 5,25]
}"
`;

exports[`inlines requires for aliases 1`] = `
"
const path = require('path')

const alias = path
alias.resolve('a')

function foo(value) {
	const alias = path
	alias.resolve('b')
}
>>>>>>>> transforms to >>>>>>>
var alias = require('path');
alias.resolve('a');
function foo(value) {
    var alias = require('path');
    alias.resolve('b');
}

======= with source map ======
{
  line 1: [1,0 => 3,0], [1,4 => 3,6], [1,9 => 3,11], [1,27 => 3,18], [1,28 => 3,18],
  line 2: [2,0 => 4,0], [2,5 => 4,5], [2,6 => 4,6], [2,13 => 4,13], [2,14 => 4,14], [2,17 => 4,17], [2,18 => 4,18], [2,19 => 4,18],
  line 3: [3,0 => 6,0], [3,13 => 6,13], [3,18 => 6,18],
  line 4: [4,4 => 7,1], [4,8 => 7,7], [4,13 => 7,12], [4,31 => 7,19], [4,32 => 7,19],
  line 5: [5,4 => 8,1], [5,9 => 8,6], [5,10 => 8,7], [5,17 => 8,14], [5,18 => 8,15], [5,21 => 8,18], [5,22 => 8,19], [5,23 => 8,19],
  line 6: [6,0 => 9,0], [6,1 => 9,1]
}"
`;

exports[`inlines requires for calls 1`] = `
"
const someFunction = require('some-function')
const not = {
	someFunction: () => { }
}

someFunction()
not.someFunction();

function foo(value) {
	someFunction().do.something()
	return someFunction()
}
>>>>>>>> transforms to >>>>>>>
var not = {
    someFunction: function () { }
};
require('some-function')();
not.someFunction();
function foo(value) {
    require('some-function')().do.something();
    return require('some-function')();
}

======= with source map ======
{
  line 1: [1,0 => 2,0], [1,4 => 2,6], [1,7 => 2,9], [1,10 => 2,12],
  line 2: [2,4 => 3,1], [2,16 => 3,13], [2,18 => 3,15], [2,32 => 3,23], [2,33 => 3,24],
  line 3: [3,1 => 4,1], [3,2 => 4,1],
  line 4: [4,0 => 6,0], [4,26 => 6,14], [4,27 => 6,14],
  line 5: [5,0 => 7,0], [5,3 => 7,3], [5,4 => 7,4], [5,16 => 7,16], [5,18 => 7,18], [5,19 => 7,19],
  line 6: [6,0 => 9,0], [6,13 => 9,13], [6,18 => 9,18],
  line 7: [7,4 => 10,1], [7,30 => 10,15], [7,31 => 10,16], [7,33 => 10,18], [7,34 => 10,19], [7,43 => 10,28], [7,45 => 10,30], [7,46 => 10,30],
  line 8: [8,4 => 11,1], [8,10 => 11,7], [8,11 => 11,8], [8,37 => 11,22], [8,38 => 11,22],
  line 9: [9,0 => 12,0], [9,1 => 12,1]
}"
`;

exports[`inlines requires for initializers 1`] = `
"
const someFunction = require('some-function')

function foo(bar: any, a = someFunction, b = someFunction()) {
	const [{ c = someFunction }] = bar
	return c
}

class bar {
	private x = someFunction
	protected y = someFunction()
}
>>>>>>>> transforms to >>>>>>>
function foo(bar, a, b) {
    if (a === void 0) { a = require('some-function'); }
    if (b === void 0) { b = require('some-function')(); }
    var _a = bar[0].c, c = _a === void 0 ? require('some-function') : _a;
    return c;
}
var bar = (function () {
    function bar() {
        this.x = require('some-function');
        this.y = require('some-function')();
    }
    return bar;
}());

======= with source map ======
{
  line 1: [1,0 => 3,0], [1,13 => 3,13], [1,16 => 3,21], [1,18 => 3,23], [1,19 => 3,39], [1,21 => 3,41], [1,22 => 3,59],
  line 2: [2,4 => 3,23], [2,22 => 3,23], [2,24 => 3,23], [2,52 => 3,39],
  line 3: [3,4 => 3,41], [3,22 => 3,41], [3,24 => 3,41], [3,54 => 3,59],
  line 4: [4,4 => 4,10], [4,8 => 4,10], [4,21 => 4,26], [4,23 => 4,10], [4,72 => 4,26], [4,73 => 4,35],
  line 5: [5,4 => 5,1], [5,10 => 5,7], [5,11 => 5,8], [5,12 => 5,9], [5,13 => 5,9],
  line 6: [6,0 => 6,0], [6,1 => 6,1],
  line 7: [7,0 => 8,0],
  line 8: [8,4 => 8,0],
  line 9: [9,8 => 9,9], [9,14 => 9,10], [9,42 => 9,25],
  line 10: [10,8 => 10,11], [10,14 => 10,12], [10,17 => 10,15], [10,43 => 10,29], [10,44 => 10,29],
  line 11: [11,4 => 11,0], [11,5 => 11,1],
  line 12: [12,4 => 11,0], [12,14 => 11,1],
  line 13: [13,0 => 11,0], [13,1 => 8,0], [13,1 => 11,1], [13,5 => 11,1]
}"
`;

exports[`inlines requires for property access 1`] = `
"
const path = require('path')
const a = path.resolve('a')
foo(path.resolve('b'))

function foo(value) {
	return path.resolve('c')
	return path.foo.bar.resolve('c')
	return foo.path.bar.resolve('c')
}
>>>>>>>> transforms to >>>>>>>
var a = require('path').resolve('a');
foo(require('path').resolve('b'));
function foo(value) {
    return require('path').resolve('c');
    return require('path').foo.bar.resolve('c');
    return foo.path.bar.resolve('c');
}

======= with source map ======
{
  line 1: [1,0 => 2,0], [1,4 => 2,6], [1,5 => 2,7], [1,8 => 2,10], [1,24 => 2,15], [1,31 => 2,22], [1,32 => 2,23], [1,35 => 2,26], [1,36 => 2,27], [1,37 => 2,27],
  line 2: [2,0 => 3,0], [2,3 => 3,3], [2,4 => 3,4], [2,20 => 3,9], [2,27 => 3,16], [2,28 => 3,17], [2,31 => 3,20], [2,32 => 3,21], [2,33 => 3,22], [2,34 => 3,22],
  line 3: [3,0 => 5,0], [3,13 => 5,13], [3,18 => 5,18],
  line 4: [4,4 => 6,1], [4,10 => 6,7], [4,11 => 6,8], [4,27 => 6,13], [4,34 => 6,20], [4,35 => 6,21], [4,38 => 6,24], [4,39 => 6,25], [4,40 => 6,25],
  line 5: [5,4 => 7,1], [5,10 => 7,7], [5,11 => 7,8], [5,27 => 7,13], [5,30 => 7,16], [5,31 => 7,17], [5,34 => 7,20], [5,35 => 7,21], [5,42 => 7,28], [5,43 => 7,29], [5,46 => 7,32], [5,47 => 7,33], [5,48 => 7,33],
  line 6: [6,4 => 8,1], [6,10 => 8,7], [6,11 => 8,8], [6,14 => 8,11], [6,15 => 8,12], [6,19 => 8,16], [6,20 => 8,17], [6,23 => 8,20], [6,24 => 8,21], [6,31 => 8,28], [6,32 => 8,29], [6,35 => 8,32], [6,36 => 8,33], [6,37 => 8,33],
  line 7: [7,0 => 9,0], [7,1 => 9,1]
}"
`;

exports[`inlines requires for ternaries 1`] = `
"
const path = require('path')

function foo() {
	let x;
	x = 0 ? 0 : 0;
	x = 0 ? path : 0;
	x = 0 ? 0 : path;
	x = 0 ? path : path;
	x = path ? path : 0;
	x = path ? 0 : path;
	x = path ? path : path;
	x = path ? path : () => path;
}
>>>>>>>> transforms to >>>>>>>
function foo() {
    var x;
    x = 0 ? 0 : 0;
    x = 0 ? require('path') : 0;
    x = 0 ? 0 : require('path');
    x = 0 ? require('path') : require('path');
    x = require('path') ? require('path') : 0;
    x = require('path') ? 0 : require('path');
    x = require('path') ? require('path') : require('path');
    x = require('path') ? require('path') : function () { return path; };
}

======= with source map ======
{
  line 1: [1,0 => 3,0],
  line 2: [2,4 => 4,1], [2,8 => 4,5], [2,9 => 4,6], [2,10 => 4,7],
  line 3: [3,4 => 5,1], [3,5 => 5,2], [3,8 => 5,5], [3,9 => 5,6], [3,12 => 5,9], [3,13 => 5,10], [3,16 => 5,13], [3,17 => 5,14], [3,18 => 5,15],
  line 4: [4,4 => 6,1], [4,5 => 6,2], [4,8 => 6,5], [4,9 => 6,6], [4,30 => 6,16], [4,31 => 6,17], [4,32 => 6,18],
  line 5: [5,4 => 7,1], [5,5 => 7,2], [5,8 => 7,5], [5,9 => 7,6], [5,12 => 7,9], [5,13 => 7,10], [5,31 => 7,17], [5,32 => 7,18],
  line 6: [6,4 => 8,1], [6,5 => 8,2], [6,8 => 8,5], [6,9 => 8,6], [6,45 => 8,20], [6,46 => 8,21],
  line 7: [7,4 => 9,1], [7,5 => 9,2], [7,8 => 9,5], [7,44 => 9,19], [7,45 => 9,20], [7,46 => 9,21],
  line 8: [8,4 => 10,1], [8,5 => 10,2], [8,8 => 10,5], [8,26 => 10,12], [8,27 => 10,13], [8,45 => 10,20], [8,46 => 10,21],
  line 9: [9,4 => 11,1], [9,5 => 11,2], [9,8 => 11,5], [9,59 => 11,23], [9,60 => 11,24],
  line 10: [10,4 => 12,1], [10,5 => 12,2], [10,8 => 12,5], [10,44 => 12,19], [10,58 => 12,25], [10,65 => 12,25], [10,69 => 12,29], [10,71 => 12,25], [10,72 => 12,29], [10,73 => 12,30],
  line 11: [11,0 => 13,0], [11,1 => 13,1]
}"
`;

exports[`works with JSX elements 1`] = `
"
const Component = require('Component');
const Local = (props) => <div/>;

function Test(props) {
	return (
		<div>
			<Component prop={ 42 } />
			<Local />
			{ Component }
			{ true && Component }
			<Local prop={ Component } />
		</div>
	)
}
>>>>>>>> transforms to >>>>>>>
var Local = function (props) { return React.createElement('div', null); };
function Test(props) {
    return (React.createElement('div', null,
        React.createElement(require('Component'), { prop: 42 }),
        React.createElement(Local, null), require('Component'),
        true && require('Component'),
        React.createElement(Local, { prop: Component })));
}

======= with source map ======
{
  line 1: [1,0 => 2,0], [1,4 => 2,6], [1,9 => 2,11], [1,12 => 2,14], [1,22 => 2,15], [1,27 => 2,20], [1,31 => 2,25], [1,38 => 2,25], [1,70 => 2,31], [1,72 => 2,25], [1,73 => 2,31], [1,74 => 2,32],
  line 2: [2,0 => 4,0], [2,14 => 4,14], [2,19 => 4,19],
  line 3: [3,4 => 5,1], [3,10 => 5,7], [3,11 => 5,8], [3,12 => 6,2],
  line 4: [4,8 => 7,3], [4,52 => 7,14], [4,56 => 7,18], [4,58 => 7,21], [4,60 => 7,23], [4,63 => 7,28],
  line 5: [5,8 => 8,3], [5,28 => 8,4], [5,33 => 8,9], [5,40 => 8,12],
  line 6: [6,8 => 10,5], [6,12 => 10,9], [6,36 => 10,22],
  line 7: [7,8 => 11,3], [7,28 => 11,4], [7,33 => 11,9], [7,37 => 11,10], [7,41 => 11,14], [7,43 => 11,17], [7,52 => 11,26], [7,55 => 11,31], [7,56 => 12,8], [7,57 => 13,2], [7,58 => 13,2],
  line 8: [8,0 => 14,0], [8,1 => 14,1]
}"
`;

exports[`works with call arguments 1`] = `
"
const path = require('path')

function foo() {}

foo(path)
foo(0 ? path : 1)
foo(0, path)
>>>>>>>> transforms to >>>>>>>
function foo() { }
foo(require('path'));
foo(0 ? require('path') : 1);
foo(0, require('path'));

======= with source map ======
{
  line 1: [1,0 => 3,0], [1,17 => 3,16], [1,18 => 3,17],
  line 2: [2,0 => 5,0], [2,3 => 5,3], [2,20 => 5,9], [2,21 => 5,9],
  line 3: [3,0 => 6,0], [3,3 => 6,3], [3,4 => 6,4], [3,5 => 6,5], [3,26 => 6,15], [3,27 => 6,16], [3,28 => 6,17], [3,29 => 6,17],
  line 4: [4,0 => 7,0], [4,3 => 7,3], [4,4 => 7,4], [4,5 => 7,5], [4,23 => 7,12], [4,24 => 7,12]
}"
`;

exports[`works with returns 1`] = `
"
const path = require('path')

function foo() {
	if (false) {
		return path;
	}

	if (false) {
		return () => path;
	}

	return [path, () => path]
}
>>>>>>>> transforms to >>>>>>>
function foo() {
    if (false) {
        return require('path');
    }
    if (false) {
        return function () { return require('path'); };
    }
    return [path, function () { return require('path'); }];
}

======= with source map ======
{
  line 1: [1,0 => 3,0],
  line 2: [2,4 => 4,1], [2,6 => 4,3], [2,7 => 4,4], [2,8 => 4,5], [2,13 => 4,10], [2,14 => 4,11], [2,15 => 4,12], [2,16 => 4,13],
  line 3: [3,8 => 5,2], [3,14 => 5,8], [3,31 => 5,14],
  line 4: [4,4 => 6,1], [4,5 => 6,2],
  line 5: [5,4 => 8,1], [5,6 => 8,3], [5,7 => 8,4], [5,8 => 8,5], [5,13 => 8,10], [5,14 => 8,11], [5,15 => 8,12], [5,16 => 8,13],
  line 6: [6,8 => 9,2], [6,14 => 9,8], [6,15 => 9,9], [6,29 => 9,15], [6,53 => 9,15], [6,54 => 9,19], [6,55 => 9,20],
  line 7: [7,4 => 10,1], [7,5 => 10,2],
  line 8: [8,4 => 12,1], [8,10 => 12,7], [8,11 => 12,8], [8,12 => 12,9], [8,16 => 12,13], [8,18 => 12,15], [8,32 => 12,21], [8,56 => 12,21], [8,57 => 12,25], [8,58 => 12,26], [8,59 => 12,26],
  line 9: [9,0 => 13,0], [9,1 => 13,1]
}"
`;

exports[`works with things named require 1`] = `
"
var require = 42
parseInt(require, 10)
function require(x: any) {
	return x.require
}
>>>>>>>> transforms to >>>>>>>
var require = 42;
parseInt(require, 10);
function require(x) {
    return x.require;
}

======= with source map ======
{
  line 1: [1,0 => 1,0], [1,4 => 1,4], [1,11 => 1,11], [1,14 => 1,14], [1,16 => 1,16], [1,17 => 1,16],
  line 2: [2,0 => 2,0], [2,8 => 2,8], [2,9 => 2,9], [2,16 => 2,16], [2,18 => 2,18], [2,20 => 2,20], [2,21 => 2,21], [2,22 => 2,21],
  line 3: [3,0 => 3,0], [3,17 => 3,17], [3,18 => 3,23],
  line 4: [4,4 => 4,1], [4,10 => 4,7], [4,11 => 4,8], [4,12 => 4,9], [4,13 => 4,10], [4,20 => 4,17], [4,21 => 4,17],
  line 5: [5,0 => 5,0], [5,1 => 5,1]
}"
`;
